// Code generated by 'goexports gonum.org/v1/plot/palette/brewer'. DO NOT EDIT.

// +build go1.14,!go1.15

package symbols

import (
	"gonum.org/v1/plot/palette/brewer"
	"reflect"
)

func init() {
	Symbols["gonum.org/v1/plot/palette/brewer"] = map[string]reflect.Value{
		// function, constant and variable definitions
		"Accent":              reflect.ValueOf(&brewer.Accent).Elem(),
		"Bad":                 reflect.ValueOf(brewer.Bad),
		"Blues":               reflect.ValueOf(&brewer.Blues).Elem(),
		"BrBG":                reflect.ValueOf(&brewer.BrBG).Elem(),
		"BuGn":                reflect.ValueOf(&brewer.BuGn).Elem(),
		"BuPu":                reflect.ValueOf(&brewer.BuPu).Elem(),
		"Dark2":               reflect.ValueOf(&brewer.Dark2).Elem(),
		"DivergingPalettes":   reflect.ValueOf(&brewer.DivergingPalettes).Elem(),
		"GetPalette":          reflect.ValueOf(brewer.GetPalette),
		"GnBu":                reflect.ValueOf(&brewer.GnBu).Elem(),
		"Good":                reflect.ValueOf(brewer.Good),
		"Greens":              reflect.ValueOf(&brewer.Greens).Elem(),
		"Greys":               reflect.ValueOf(&brewer.Greys).Elem(),
		"NotAvalailable":      reflect.ValueOf(brewer.NotAvalailable),
		"OrRd":                reflect.ValueOf(&brewer.OrRd).Elem(),
		"Oranges":             reflect.ValueOf(&brewer.Oranges).Elem(),
		"PRGn":                reflect.ValueOf(&brewer.PRGn).Elem(),
		"Paired":              reflect.ValueOf(&brewer.Paired).Elem(),
		"Pastel1":             reflect.ValueOf(&brewer.Pastel1).Elem(),
		"Pastel2":             reflect.ValueOf(&brewer.Pastel2).Elem(),
		"PiYG":                reflect.ValueOf(&brewer.PiYG).Elem(),
		"PuBu":                reflect.ValueOf(&brewer.PuBu).Elem(),
		"PuBuGn":              reflect.ValueOf(&brewer.PuBuGn).Elem(),
		"PuOr":                reflect.ValueOf(&brewer.PuOr).Elem(),
		"PuRd":                reflect.ValueOf(&brewer.PuRd).Elem(),
		"Purples":             reflect.ValueOf(&brewer.Purples).Elem(),
		"QualitativePalettes": reflect.ValueOf(&brewer.QualitativePalettes).Elem(),
		"RdBu":                reflect.ValueOf(&brewer.RdBu).Elem(),
		"RdGy":                reflect.ValueOf(&brewer.RdGy).Elem(),
		"RdPu":                reflect.ValueOf(&brewer.RdPu).Elem(),
		"RdYlBu":              reflect.ValueOf(&brewer.RdYlBu).Elem(),
		"RdYlGn":              reflect.ValueOf(&brewer.RdYlGn).Elem(),
		"Reds":                reflect.ValueOf(&brewer.Reds).Elem(),
		"SequentialPalettes":  reflect.ValueOf(&brewer.SequentialPalettes).Elem(),
		"Set1":                reflect.ValueOf(&brewer.Set1).Elem(),
		"Set2":                reflect.ValueOf(&brewer.Set2).Elem(),
		"Set3":                reflect.ValueOf(&brewer.Set3).Elem(),
		"Spectral":            reflect.ValueOf(&brewer.Spectral).Elem(),
		"TypeAny":             reflect.ValueOf(brewer.TypeAny),
		"TypeDiverging":       reflect.ValueOf(brewer.TypeDiverging),
		"TypeQualitative":     reflect.ValueOf(brewer.TypeQualitative),
		"TypeSequential":      reflect.ValueOf(brewer.TypeSequential),
		"Unsure":              reflect.ValueOf(brewer.Unsure),
		"YlGn":                reflect.ValueOf(&brewer.YlGn).Elem(),
		"YlGnBu":              reflect.ValueOf(&brewer.YlGnBu).Elem(),
		"YlOrBr":              reflect.ValueOf(&brewer.YlOrBr).Elem(),
		"YlOrRd":              reflect.ValueOf(&brewer.YlOrRd).Elem(),

		// type definitions
		"Color":               reflect.ValueOf((*brewer.Color)(nil)),
		"Diverging":           reflect.ValueOf((*brewer.Diverging)(nil)),
		"DivergingPalette":    reflect.ValueOf((*brewer.DivergingPalette)(nil)),
		"NonDivergingPalette": reflect.ValueOf((*brewer.NonDivergingPalette)(nil)),
		"Palette":             reflect.ValueOf((*brewer.Palette)(nil)),
		"PaletteType":         reflect.ValueOf((*brewer.PaletteType)(nil)),
		"Qualitative":         reflect.ValueOf((*brewer.Qualitative)(nil)),
		"Sequential":          reflect.ValueOf((*brewer.Sequential)(nil)),
		"Usability":           reflect.ValueOf((*brewer.Usability)(nil)),
	}
}
